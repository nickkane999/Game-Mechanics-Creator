# General Component Architecture Rules

## Core Philosophy
Build components that are modular, maintainable, type-safe, and follow consistent patterns across the entire application.

## Universal Component Patterns

### 1. Single Props Interface
**MANDATORY: All components must use single props object pattern:**
```tsx
// ✅ REQUIRED PATTERN - REGARDLESS OF PARAMETER NAMES
export default function ComponentName({ props }: { props: ComponentProps }) {
  if (!props) {
    console.error('ComponentName: props is undefined');
    return null;
  }
  const { state, handlers } = props;
}

// ❌ NEVER USE - Even with descriptive names
export default function ComponentName({ url, onUrlChange, isAnalyzing, error, onClearError }) {}
export default function ComponentName({ activeAnalysisTypes, onAnalysisTypeToggle, canRunAnalysis }) {}
```

### 2. Props Structure Standard
```tsx
export type ComponentProps = {
  state: ComponentStateInterface;
  handlers?: ComponentHandlersType;
};
```

### 3. Runtime Safety Protocol
Every component MUST include props validation:
```tsx
if (!props) {
  console.error('ComponentName: props is undefined');
  return null;
}
```

## File Architecture Standards

### 1. Configuration Centralization
**ALWAYS create `config.ts` for each page/feature:**
- TypeScript interfaces and types
- Component prop type definitions
- Constants and configuration values
- Enum definitions
- **ALL component interfaces MUST be exported from config.ts, never inline**

### 2. UI Utilities Organization
**ALWAYS create `ui/ui.tsx` for each page/feature:**
- Reusable UI components
- Styling utility functions
- Object maps for dynamic styling
- State extraction utilities
- Helper functions
- **ALL className logic that uses conditionals MUST be in utility functions**
- **ALL repeated styling patterns MUST be centralized**

### 3. Component Decomposition Rules

**MANDATORY FILE SIZE LIMITS:**
- **100 lines max per component** - Exception: NEVER allow files > 150 lines
- **500+ lines**: IMMEDIATE decomposition required
- **300+ lines**: High priority for refactoring  
- **150+ lines**: Should be decomposed when convenient

**When a component exceeds 100 lines, decompose into:**
```
ParentComponent.tsx
├── ui/ComponentHeader.tsx
├── ui/ComponentFilters.tsx
├── ui/ComponentContent.tsx
└── ui/ComponentFooter.tsx
```

**SPECIFIC DECOMPOSITION TRIGGERS:**
- Multiple JSX sections (> 20 lines each) → separate components
- Repeated UI patterns → reusable components
- Tab content sections → individual tab components
- Form sections → separate form components
- Modal content → separate modal components

**When a component has long onClick handlers, extract to:**
- `ui/eventHandlers.ts` for event handlers
- `ui/exportHandlers.ts` for export functions
- `ui/utils.ts` for utility functions

**AUTOMATIC DECOMPOSITION SIGNALS:**
- File > 100 lines → Plan decomposition strategy
- File > 150 lines → STOP and decompose immediately
- Multiple logical sections → Extract to components
- Repeated JSX patterns → Create reusable components

## Import Organization Standards

### 1. Single Line Import Rule
**MANDATORY: All related imports on single line:**
```tsx
// ✅ REQUIRED
import { ComponentProps, InterfaceName, Constants } from "../../config";
import { utilFunc1, utilFunc2, utilFunc3, Component1, Component2 } from "./ui";

// ❌ FORBIDDEN - Multi-line imports for same source
import { 
  utilFunc1, 
  utilFunc2, 
  utilFunc3 
} from "./ui";
```

### 2. Import Order
```tsx
import React from "react";
import { IconName } from "@heroicons/react/24/outline";
import { ComponentProps } from "../../config";
import { utilityFunction } from "../ui/ui";
import { useComponentLogic } from "../../hooks/ComponentName/useComponentLogic";
```

## State Management Architecture

### 1. Redux vs Hooks Separation
**Redux Usage:**
- Global application state
- Cross-page data sharing
- Complex state mutations
- Async operations with caching

**Custom Hooks Usage:**
- Component-specific logic
- Local state management
- Event handlers
- Form state
- UI interaction state

### 2. Hook Organization Pattern
```
hooks/
├── usePageName.ts          // Main page hook (Redux integration)
├── ComponentName/
│   ├── useComponentLogic.ts     // Component business logic
│   └── useComponentHandlers.ts  // Event handlers
└── shared/
    ├── useSharedLogic.ts   // Cross-component logic
    └── useUtilities.ts     // Common utilities
```

### 3. Object Maps Mandate
**NEVER use switch statements. ALWAYS use object maps:**
```tsx
// ✅ REQUIRED
const statusStyles = {
  success: 'bg-green-50 text-green-800',
  error: 'bg-red-50 text-red-800',
  warning: 'bg-yellow-50 text-yellow-800',
  info: 'bg-blue-50 text-blue-800',
};

export function getStatusStyle(status: string) {
  return statusStyles[status] || statusStyles.info;
}

// ❌ FORBIDDEN
switch (status) {
  case 'success': return 'bg-green-50';
  // ...
}
```

## Component Logic Distribution

### 1. State Extraction Utilities
Create utilities to organize component props:
```tsx
export function getComponentStates(state: any, handlers: any) {
  const section1_state = { /* relevant state */ };
  const section2_state = { /* relevant state */ };
  const section3_state = { /* relevant state */ };
  
  return { section1_state, section2_state, section3_state };
}
```

### 2. Handler Logic Organization
**Component Handlers (Custom Hooks):**
- User interactions (clicks, form changes)
- Local state updates
- Validation logic
- UI state management

**Redux Actions (usePageName hooks):**
- API calls
- Global state updates
- Cross-component communication
- Data persistence

**Long Functions MUST be extracted:**
- onClick handlers > 5 lines → separate file
- Export functions → `ui/exportHandlers.ts`
- Complex calculations → `ui/utils.ts`

### 3. Business Logic Separation
```tsx
// ✅ CORRECT - Separated concerns
const useBusinessLogic = () => {
  // Pure business logic
  const validateData = (data) => { /* validation */ };
  const processData = (data) => { /* processing */ };
  return { validateData, processData };
};

const useUIHandlers = () => {
  // UI interaction logic
  const handleClick = () => { /* UI logic */ };
  const handleSubmit = () => { /* form logic */ };
  return { handleClick, handleSubmit };
};
```

## Type Safety Requirements

### 1. Interface Definition Strategy
**Page-level interfaces in config.ts:**
```tsx
export interface PageStateInterface {
  // Page-wide state properties
}

export interface ComponentStateInterface {
  // Component-specific state
}

export type ComponentProps = {
  state: ComponentStateInterface;
  handlers?: ComponentHandlersType;
};
```

### 2. Handler Type Safety
```tsx
export interface ComponentHandlersType {
  onAction: (param: Type) => void;
  onUpdate: (id: string, data: DataType) => void;
  onValidate: () => boolean;
}
```

## Styling and UI Patterns

### 1. Consistent Color System
```tsx
const colorSystem = {
  primary: 'indigo',
  success: 'green',
  error: 'red',
  warning: 'yellow',
  info: 'blue',
  neutral: 'gray',
};
```

### 2. Dynamic Styling Functions
**MANDATORY: ALL conditional className logic in ui.tsx:**
```tsx
// ✅ REQUIRED - Move to ui.tsx
export function getVariantClasses(variant: string, type: 'button' | 'badge' | 'alert') {
  const variants = {
    button: { primary: 'bg-indigo-600 text-white', /* ... */ },
    badge: { primary: 'bg-indigo-100 text-indigo-800', /* ... */ },
    alert: { primary: 'bg-indigo-50 border-indigo-200', /* ... */ },
  };
  return variants[type][variant] || variants[type].primary;
}

// ❌ FORBIDDEN - Inline conditional classes
className={`base-class ${condition ? 'true-class' : 'false-class'}`}
```

## ClassName Efficiency & Extraction Rule

### 1. No Inline Conditional ClassNames
- **MANDATORY:** All conditional or computed className logic (ternaries, chained conditions, or repeated patterns) **MUST** be extracted to a utility function.
- **NEVER** use inline ternaries or chained conditions for className directly in JSX.

**Example (FORBIDDEN):**
```tsx
<div className={`border rounded-lg ${
  rec.impact === 'Critical' ? 'border-red-300 bg-red-50' :
  rec.impact === 'High' ? 'border-orange-300 bg-orange-50' :
  rec.impact === 'Medium' ? 'border-yellow-300 bg-yellow-50' :
  'border-blue-300 bg-blue-50'
}`}>
```

### 2. Use UI Utility Functions
- **REQUIRED:** All dynamic className logic must be implemented as a function in the `ui/ui.tsx` file for the feature/page.
- The function should take the relevant value (e.g., `impact`, `score`, `audit`) and return the correct className string.

**Example (REQUIRED):**
```tsx
// In ui/ui.tsx
export function getImpactBoxClass(impact: string) {
  const map = {
    Critical: 'border-red-300 bg-red-50',
    High: 'border-orange-300 bg-orange-50',
    Medium: 'border-yellow-300 bg-yellow-50',
    Low: 'border-blue-300 bg-blue-50',
  };
  return map[impact] || map.Low;
}

// In component
<div className={`border rounded-lg ${getImpactBoxClass(rec.impact)}`}>
```

### 3. Centralize All ClassName Maps
- **MANDATORY:** Any object map or function that returns a className based on a value (e.g., impact, score, status) **MUST** be defined in `ui/ui.tsx` and imported into the component.
- **NEVER** define these maps or functions inline in the component file.

### 4. HTML Return Functions for Complex Patterns
- If a className pattern is used in multiple places or is complex, create a function in `ui/ui.tsx` that returns the full HTML/JSX block, not just the className.
- **Import and use these functions** in the main component for consistency and maintainability.

**Example:**
```tsx
// In ui/ui.tsx
export function renderImpactBadge(impact: string) {
  const className = getImpactBoxClass(impact);
  return <span className={className}>{impact}</span>;
}

// In component
{renderImpactBadge(rec.impact)}
```

### 5. Review Checklist
- [ ] No inline ternary or chained className logic in JSX
- [ ] All dynamic className logic is in `ui/ui.tsx`
- [ ] All className maps are centralized
- [ ] Complex repeated HTML blocks are extracted as functions in `ui/ui.tsx`
- [ ] Components import and use these utilities/functions

**Summary:**  
> **If you see a file with repeated, complex, or conditional className logic in JSX, IMMEDIATELY extract it to a function in `ui/ui.tsx` and import it. For complex repeated HTML, extract a function that returns the full JSX. Never use inline ternaries for className.**

## Integration Patterns

### 1. Parent-Child Communication
```tsx
// Parent Component
const parentHandlers = useParentLogic();
const childHandlers = useChildLogic();

const { child1_state, child2_state } = getComponentStates(state, {
  ...parentHandlers,
  ...childHandlers,
});

return (
  <div>
    <Child1 props={{ state: child1_state }} />
    <Child2 props={{ state: child2_state }} />
  </div>
);
```

### 2. Hook Composition Pattern
```tsx
export function usePageName() {
  const reduxState = useSelector(selectPageState);
  const dispatch = useDispatch();
  
  const businessLogic = useBusinessLogic();
  const uiHandlers = useUIHandlers();
  
  return {
    state: reduxState,
    actions: { /* redux actions */ },
    ...businessLogic,
    ...uiHandlers,
  };
}
```

## Code Quality Standards

### 1. Modern Component Syntax
```tsx
// ✅ REQUIRED
export default function ComponentName(props: PropsType) {}

// ❌ FORBIDDEN
const ComponentName: React.FC<PropsType> = () => {}
```

### 2. Import Organization
```tsx
import React from "react";
import { IconName } from "@heroicons/react/24/outline";
import { ComponentProps } from "../../config";
import { utilityFunction } from "../ui/ui";
import { useComponentLogic } from "../../hooks/ComponentName/useComponentLogic";
```

### 3. No Inline Comments Rule
- Code must be self-documenting
- Use descriptive variable/function names
- Document architecture in .cursorrules files only

## Testing Strategy

### 1. Component Testability
Components should be easily testable due to:
- Clear prop interfaces
- Separated state and handlers
- Pure function utilities
- Predictable state structure

### 2. Mock-Friendly Architecture
```tsx
// Easy to mock handlers
const mockHandlers = { onAction: jest.fn() };
const mockState = { data: testData };
render(<Component props={{ state: mockState, handlers: mockHandlers }} />);
```

## Performance Considerations

### 1. Component Optimization
- Use React.memo for expensive components
- Memoize handler functions with useCallback
- Optimize state extraction utilities

### 2. Bundle Organization
- Keep ui/ui.tsx focused and tree-shakeable
- Separate heavy utilities into dedicated files
- Use dynamic imports for heavy features

## Mandatory Refactoring Checklist

Before considering any new feature complete:

✅ Uses single props pattern (NO exceptions for descriptive parameter names)  
✅ Has config.ts with ALL types (NO inline interfaces)  
✅ Has ui/ui.tsx with utilities (ALL conditional className logic extracted)  
✅ Components under 100 lines each  
✅ Object maps instead of switches  
✅ Clear state/handlers separation  
✅ Runtime props validation  
✅ Modern component syntax  
✅ Proper TypeScript typing  
✅ Self-documenting code  
✅ Single-line imports for same source  
✅ Long onClick handlers extracted to separate files  
✅ ALL repeated variables centralized in ui.tsx  

## Automatic Issue Prevention

**These patterns MUST be applied automatically:**

1. **Props Pattern**: If you see destructured parameters, immediately convert to `{ props }: { props: ComponentProps }`
2. **Interface Location**: If you see inline interfaces, immediately move to config.ts
3. **Conditional Classes**: If you see ternary operators in className, immediately extract to ui.tsx utility
4. **Long Functions**: If you see onClick handlers > 5 lines, immediately extract to separate file
5. **Multi-line Imports**: If you see multi-line imports from same source, immediately convert to single line
6. **Repeated Variables**: If you see same variable in multiple files, immediately centralize in ui.tsx
7. **File Size**: If you see component > 150 lines, STOP and decompose immediately
8. **Tab Content**: If you see multiple tab sections, extract each to separate component

This architecture ensures scalable, maintainable, and consistent components across the entire application.
